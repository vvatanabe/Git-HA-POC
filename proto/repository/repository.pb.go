// Code generated by protoc-gen-go. DO NOT EDIT.
// source: repository/repository.proto

package repository

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateRepositoryRequest struct {
	User                 string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Repo                 string   `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRepositoryRequest) Reset()         { *m = CreateRepositoryRequest{} }
func (m *CreateRepositoryRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryRequest) ProtoMessage()    {}
func (*CreateRepositoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3acff7912fe3bb, []int{0}
}

func (m *CreateRepositoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRepositoryRequest.Unmarshal(m, b)
}
func (m *CreateRepositoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRepositoryRequest.Marshal(b, m, deterministic)
}
func (m *CreateRepositoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRepositoryRequest.Merge(m, src)
}
func (m *CreateRepositoryRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRepositoryRequest.Size(m)
}
func (m *CreateRepositoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRepositoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRepositoryRequest proto.InternalMessageInfo

func (m *CreateRepositoryRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateRepositoryRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

type CreateRepositoryResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRepositoryResponse) Reset()         { *m = CreateRepositoryResponse{} }
func (m *CreateRepositoryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRepositoryResponse) ProtoMessage()    {}
func (*CreateRepositoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb3acff7912fe3bb, []int{1}
}

func (m *CreateRepositoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRepositoryResponse.Unmarshal(m, b)
}
func (m *CreateRepositoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRepositoryResponse.Marshal(b, m, deterministic)
}
func (m *CreateRepositoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRepositoryResponse.Merge(m, src)
}
func (m *CreateRepositoryResponse) XXX_Size() int {
	return xxx_messageInfo_CreateRepositoryResponse.Size(m)
}
func (m *CreateRepositoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRepositoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRepositoryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateRepositoryRequest)(nil), "repository.CreateRepositoryRequest")
	proto.RegisterType((*CreateRepositoryResponse)(nil), "repository.CreateRepositoryResponse")
}

func init() { proto.RegisterFile("repository/repository.proto", fileDescriptor_cb3acff7912fe3bb) }

var fileDescriptor_cb3acff7912fe3bb = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4a, 0x2d, 0xc8,
	0x2f, 0xce, 0x2c, 0xc9, 0x2f, 0xaa, 0xd4, 0x47, 0x30, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0xb8, 0x10, 0x22, 0x4a, 0x8e, 0x5c, 0xe2, 0xce, 0x45, 0xa9, 0x89, 0x25, 0xa9, 0x41, 0x70, 0xb1,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xd2, 0xe2, 0xd4, 0x22, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x1b, 0x24, 0x06, 0xd2, 0x2c, 0xc1, 0x04, 0x11, 0x03,
	0xb1, 0x95, 0xa4, 0xb8, 0x24, 0x30, 0x8d, 0x28, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0x2a, 0xe2,
	0x12, 0x44, 0x88, 0x06, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xc5, 0x72, 0x09, 0xa0, 0x6b,
	0x10, 0x52, 0xd6, 0x43, 0x72, 0x26, 0x0e, 0x17, 0x49, 0xa9, 0xe0, 0x57, 0x04, 0xb1, 0xd3, 0xc9,
	0x28, 0xca, 0x20, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0xac, 0x2c,
	0xb1, 0x24, 0x31, 0x2f, 0x31, 0x29, 0x55, 0x3f, 0x3d, 0xb3, 0x44, 0x37, 0x23, 0x51, 0xb7, 0x20,
	0x3f, 0x59, 0x1f, 0x1c, 0x0e, 0x48, 0x01, 0x93, 0xc4, 0x06, 0x16, 0x31, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x72, 0x0e, 0xd7, 0x03, 0x38, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error)
}

type repositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryServiceClient(cc *grpc.ClientConn) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error) {
	out := new(CreateRepositoryResponse)
	err := c.cc.Invoke(ctx, "/repository.RepositoryService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
type RepositoryServiceServer interface {
	CreateRepository(context.Context, *CreateRepositoryRequest) (*CreateRepositoryResponse, error)
}

// UnimplementedRepositoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRepositoryServiceServer struct {
}

func (*UnimplementedRepositoryServiceServer) CreateRepository(ctx context.Context, req *CreateRepositoryRequest) (*CreateRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}

func RegisterRepositoryServiceServer(s *grpc.Server, srv RepositoryServiceServer) {
	s.RegisterService(&_RepositoryService_serviceDesc, srv)
}

func _RepositoryService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepositoryService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CreateRepository(ctx, req.(*CreateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepository",
			Handler:    _RepositoryService_CreateRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repository/repository.proto",
}
