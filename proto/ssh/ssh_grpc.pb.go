// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ssh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SSHProtocolServiceClient is the client API for SSHProtocolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSHProtocolServiceClient interface {
	PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (SSHProtocolService_PostUploadPackClient, error)
	PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (SSHProtocolService_PostReceivePackClient, error)
}

type sSHProtocolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSHProtocolServiceClient(cc grpc.ClientConnInterface) SSHProtocolServiceClient {
	return &sSHProtocolServiceClient{cc}
}

func (c *sSHProtocolServiceClient) PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (SSHProtocolService_PostUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SSHProtocolService_serviceDesc.Streams[0], "/ssh.SSHProtocolService/PostUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &sSHProtocolServicePostUploadPackClient{stream}
	return x, nil
}

type SSHProtocolService_PostUploadPackClient interface {
	Send(*UploadPackRequest) error
	Recv() (*UploadPackResponse, error)
	grpc.ClientStream
}

type sSHProtocolServicePostUploadPackClient struct {
	grpc.ClientStream
}

func (x *sSHProtocolServicePostUploadPackClient) Send(m *UploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sSHProtocolServicePostUploadPackClient) Recv() (*UploadPackResponse, error) {
	m := new(UploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sSHProtocolServiceClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (SSHProtocolService_PostReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SSHProtocolService_serviceDesc.Streams[1], "/ssh.SSHProtocolService/PostReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &sSHProtocolServicePostReceivePackClient{stream}
	return x, nil
}

type SSHProtocolService_PostReceivePackClient interface {
	Send(*ReceivePackRequest) error
	Recv() (*ReceivePackResponse, error)
	grpc.ClientStream
}

type sSHProtocolServicePostReceivePackClient struct {
	grpc.ClientStream
}

func (x *sSHProtocolServicePostReceivePackClient) Send(m *ReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sSHProtocolServicePostReceivePackClient) Recv() (*ReceivePackResponse, error) {
	m := new(ReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SSHProtocolServiceServer is the server API for SSHProtocolService service.
// All implementations must embed UnimplementedSSHProtocolServiceServer
// for forward compatibility
type SSHProtocolServiceServer interface {
	PostUploadPack(SSHProtocolService_PostUploadPackServer) error
	PostReceivePack(SSHProtocolService_PostReceivePackServer) error
	mustEmbedUnimplementedSSHProtocolServiceServer()
}

// UnimplementedSSHProtocolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSHProtocolServiceServer struct {
}

func (UnimplementedSSHProtocolServiceServer) PostUploadPack(SSHProtocolService_PostUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostUploadPack not implemented")
}
func (UnimplementedSSHProtocolServiceServer) PostReceivePack(SSHProtocolService_PostReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostReceivePack not implemented")
}
func (UnimplementedSSHProtocolServiceServer) mustEmbedUnimplementedSSHProtocolServiceServer() {}

// UnsafeSSHProtocolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSHProtocolServiceServer will
// result in compilation errors.
type UnsafeSSHProtocolServiceServer interface {
	mustEmbedUnimplementedSSHProtocolServiceServer()
}

func RegisterSSHProtocolServiceServer(s grpc.ServiceRegistrar, srv SSHProtocolServiceServer) {
	s.RegisterService(&_SSHProtocolService_serviceDesc, srv)
}

func _SSHProtocolService_PostUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SSHProtocolServiceServer).PostUploadPack(&sSHProtocolServicePostUploadPackServer{stream})
}

type SSHProtocolService_PostUploadPackServer interface {
	Send(*UploadPackResponse) error
	Recv() (*UploadPackRequest, error)
	grpc.ServerStream
}

type sSHProtocolServicePostUploadPackServer struct {
	grpc.ServerStream
}

func (x *sSHProtocolServicePostUploadPackServer) Send(m *UploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sSHProtocolServicePostUploadPackServer) Recv() (*UploadPackRequest, error) {
	m := new(UploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SSHProtocolService_PostReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SSHProtocolServiceServer).PostReceivePack(&sSHProtocolServicePostReceivePackServer{stream})
}

type SSHProtocolService_PostReceivePackServer interface {
	Send(*ReceivePackResponse) error
	Recv() (*ReceivePackRequest, error)
	grpc.ServerStream
}

type sSHProtocolServicePostReceivePackServer struct {
	grpc.ServerStream
}

func (x *sSHProtocolServicePostReceivePackServer) Send(m *ReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sSHProtocolServicePostReceivePackServer) Recv() (*ReceivePackRequest, error) {
	m := new(ReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SSHProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssh.SSHProtocolService",
	HandlerType: (*SSHProtocolServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostUploadPack",
			Handler:       _SSHProtocolService_PostUploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostReceivePack",
			Handler:       _SSHProtocolService_PostReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ssh/ssh.proto",
}
